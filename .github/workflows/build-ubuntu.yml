# A unique name for the workflow.
name: Build and Release Prayer Player (Ubuntu)

# Triggers the workflow on push or pull request events for the main branch.
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    # This job runs on Ubuntu to build for Linux.
    runs-on: ubuntu-22.04

    steps:
    # Step 1: Check out the repository code.
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up the specified Python version.
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Step 3: Install all required Python dependencies from requirements files.
    - name: Install Linux GUI dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1 libpulse0 libxcb-cursor0 libasound2-dev
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    # Step 4: Build the application executable using PyInstaller.
    - name: Create Google Client Config from secret
      run: echo "${{ secrets.GOOGLE_CLIENT_CONFIG_JSON }}" > src/config/security/google_client_config.json

    - name: Build application executable
      run: pyinstaller --noconfirm PrayerPlayer.spec

    - name: Set up token for dry run
      run: |
        mkdir -p ~/.local/share/PrayerPlayer
        echo "${{ secrets.TOKEN }}" > ~/.local/share/PrayerPlayer/token.json

    # Step 5: Test application startup (dry run)
    - name: Test application startup (dry run)
      shell: bash
      run: |
        echo "Listing contents of dist directory:"
        ls -R dist
        echo "Running startup test for Linux"
        ./dist/PrayerPlayer --dry-run --country US --city "New York"

    # Step 6: Build and package Ubuntu .deb file
    - name: Build and package Ubuntu .deb file
      shell: bash
      run: |
        # Exit immediately if a command fails.
        set -e

        # Define package details
        DEB_DIR="prayer-player-deb"
        VERSION="1.0.0"

        # Create the Debian package structure
        mkdir -p "${DEB_DIR}/DEBIAN"
        mkdir -p "${DEB_DIR}/usr/local/bin"
        mkdir -p "${DEB_DIR}/usr/share/applications"
        mkdir -p "${DEB_DIR}/usr/share/icons/hicolor/256x256/apps"

        # Create the control file using a heredoc for readability.
        cat <<EOF > "${DEB_DIR}/DEBIAN/control"
        Package: prayer-player
        Version: ${VERSION}
        Architecture: amd64
        Maintainer: Omar <dev@omar.com>
        Description: Prayer times application that plays the Adhan.
        EOF

        # Create the desktop entry file using a heredoc.
        cat <<EOF > "${DEB_DIR}/usr/share/applications/prayer-player.desktop"
        [Desktop Entry]
        Name=Prayer Player
        Exec=bash -c "/usr/local/bin/PrayerPlayer"
        Icon=prayer-player
        Type=Application;
        Categories=Utility;
        EOF

        # Copy the application executable and icon into the package structure.
        cp dist/PrayerPlayer "${DEB_DIR}/usr/local/bin/"
        cp src/assets/mosque.png "${DEB_DIR}/usr/share/icons/hicolor/256x256/apps/prayer-player.png"

        # Set correct permissions for the package directory.
        chmod -R 755 "${DEB_DIR}"

        # Build the final .deb package.
        dpkg-deb --build "${DEB_DIR}"

        # Move the created package to the dist folder for upload.
        mv "${DEB_DIR}.deb" "dist/prayer-player-${VERSION}-amd64.deb"

        # List the content of the dist folder to verify.
        echo "--- Final .deb artifact ---"
        ls -l dist/

    # Step 7: Upload Ubuntu Artifact
    - name: Upload Ubuntu Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prayer-player-ubuntu
        path: dist/*.deb
