# A unique name for the workflow.
name: Build and Release Prayer Player

# Triggers the workflow on push or pull request events for the main branch.
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    # This job runs on a matrix of operating systems to build for each platform.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-latest, macos-latest ]

    steps:
    # Step 1: Check out the repository code.
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up the specified Python version.
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Step 3: Install all required Python dependencies from requirements files.
    - name: Install Linux GUI dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    # Step 4: Build the application executable using PyInstaller.
    # This step runs for all operating systems, but the path separator for --add-data
    # is different between Windows (;) and Unix-based systems (:).
    - name: Build application executable
      run: pyinstaller --noconfirm PrayerPlayer.spec

    # NEW STEP: Test application startup (dry run)
    - name: Test application startup (dry run)
      shell: bash
      run: |
        echo "Running startup test for ${{ runner.os }}"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./dist/PrayerPlayer.exe --dry-run
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          ./dist/PrayerPlayer --dry-run
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          ./dist/PrayerPlayer.app/Contents/MacOS/PrayerPlayer --dry-run
        fi

    # --- Windows-Specific Steps ---
    - name: Install Inno Setup for Windows installer
      if: matrix.os == 'windows-latest'
      run: choco install innosetup --no-progress

    - name: Compile Windows installer
      if: matrix.os == 'windows-latest'
      run: iscc "deployment\windows\setup.iss"

    # --- Ubuntu-Specific Steps ---
    - name: Build and package Ubuntu .deb file
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
        # Exit immediately if a command fails.
        set -e

        # Define package details
        DEB_DIR="prayer-player-deb"
        VERSION="1.0.0"

        # Create the Debian package structure
        mkdir -p "${DEB_DIR}/DEBIAN"
        mkdir -p "${DEB_DIR}/usr/local/bin"
        mkdir -p "${DEB_DIR}/usr/share/applications"
        mkdir -p "${DEB_DIR}/usr/share/icons/hicolor/256x256/apps"

        # Create the control file using a heredoc for readability.
        cat <<EOF > "${DEB_DIR}/DEBIAN/control"
        Package: prayer-player
        Version: ${VERSION}
        Architecture: amd64
        Maintainer: Omar <dev@omar.com>
        Description: Prayer times application that plays the Adhan.
        EOF

        # Create the desktop entry file using a heredoc.
        cat <<EOF > "${DEB_DIR}/usr/share/applications/prayer-player.desktop"
        [Desktop Entry]
        Name=Prayer Player
        Exec=bash -c "/usr/local/bin/PrayerPlayer"
        Icon=prayer-player
        Type=Application
        Categories=Utility;
        EOF

        # Copy the application executable and icon into the package structure.
        cp dist/PrayerPlayer "${DEB_DIR}/usr/local/bin/"
        cp src/prayer/assets/mosque.png "${DEB_DIR}/usr/share/icons/hicolor/256x256/apps/prayer-player.png"

        # Set correct permissions for the package directory.
        chmod -R 755 "${DEB_DIR}"

        # Build the final .deb package.
        dpkg-deb --build "${DEB_DIR}"

        # Move the created package to the dist folder for upload.
        mv "${DEB_DIR}.deb" "dist/prayer-player-${VERSION}-amd64.deb"

        # List the content of the dist folder to verify.
        echo "--- Final .deb artifact ---"
        ls -l dist/

    # --- macOS-Specific Steps ---
    - name: Build and package macOS .dmg file
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Install create-dmg tool using Homebrew.
        brew install create-dmg

        # Create the final .dmg installer.
        create-dmg \
          --volname "PrayerPlayer Installer" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "PrayerPlayer.app" 200 190 \
          --hide-extension "PrayerPlayer.app" \
          --app-drop-link 600 185 \
          "dist/PrayerPlayer.dmg" \
          "dist/PrayerPlayer.app"

    # --- Artifact Upload Steps ---
    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: prayer-player-windows
        path: deployment/windows/Output/*.exe

    - name: Upload Ubuntu Artifact
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: prayer-player-ubuntu
        path: dist/*.deb

    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: prayer-player-macos
        path: dist/*.dmg
