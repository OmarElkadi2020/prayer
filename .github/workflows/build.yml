# .github/workflows/release.yml

name: Build, Test, and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # e.g., v1.0.0, v1.2.3
  pull_request:
    branches:
      - main

jobs:
  ##################################################
  #                LINT & TEST JOB                 #
  ##################################################
  test-and-lint:
    name: 🧪 Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # Cache pip dependencies to speed up subsequent runs

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with Ruff
        run: ruff check .

      - name: Run tests with Pytest
        run: pytest # Assumes you have tests configured to run with the `pytest` command

  ##################################################
  #                   BUILD JOB                    #
  ##################################################
  build:
    name: 🏗️ Build for ${{ matrix.os_name }}
    needs: test-and-lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            os_name: ubuntu
            asset_glob: dist/*.deb
          - os: macos-latest
            os_name: macos
            asset_glob: dist/*.dmg
          - os: windows-latest
            os_name: windows
            asset_glob: dist/PrayerPlayerSetup.exe

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Linux GUI dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libpulse0 libxcb-cursor0 libasound2-dev alsa-utils libqt6gui6 libqt6widgets6

      - name: Create Google Client Config from Secret
        # This is more secure than passing the secret as a command-line argument.
        # Your build.py script will need to be updated to read this file.
        run: echo "${{ secrets.GOOGLE_CLIENT_CONFIG }}" > src/config/security/google_client_config.json
        shell: bash

      - name: Build application
        run: python build.py --release

      - name: Smoke Test Application
        # This step runs a quick check on the built application.
        # `continue-on-error: true` prevents the workflow from failing if the smoke test fails.
        continue-on-error: true
        run: |
<<<<<<< HEAD
          # Install xvfb for headless GUI testing
          sudo apt-get update
          sudo apt-get install -y xvfb
          # Run the application in a virtual display with dry run arguments
          dist/PrayerPlayer --dry-run --country "Germany" --city "Deggendorf" || true

      - name: Dry run built application (macOS)
        if: runner.os == 'macOS'
        run: |
          # Run the application directly with dry run arguments
          dist/PrayerPlayer.app/Contents/MacOS/PrayerPlayer --dry-run --country "Germany" --city "Deggendorf" || true

      - name: Debug Windows Build Artifacts
        if: runner.os == 'Windows'
        run: |
          echo "Listing contents of dist/PrayerPlayer:"
          Get-ChildItem dist/PrayerPlayer -Recurse
          echo ""
          echo "Contents of src/config/security/google_client_config.json:"
          Get-Content src/config/security/google_client_config.json || true

      - name: Dry run built application (Windows)
        if: runner.os == 'Windows'
        run: |
          # Run the application directly with dry run arguments
          & .\dist\PrayerPlayer\PrayerPlayer.exe --dry-run --country "Germany" --city "Deggendorf" || true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_path }}

  release:
    name: 🚀 Create Release
    needs: build-and-package
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release and upload assets
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # Artifacts will be downloaded into subdirectories (e.g., dist/prayer-player-ubuntu/)

      - name: Display structure of downloaded files
        # This step helps in debugging by showing the exact file structure before release.
        run: ls -R dist

      - name: Create GitHub Release and Upload Assets
        # This single action creates the release and uploads all matching files.
        # It handles the logic of finding the files within the directories
        # created by download-artifact, which fixes the 'EISDIR' error.
        uses: softprops/action-gh-release@v2
        with:
=======
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install -y xvfb
            xvfb-run dist/PrayerPlayer --dry-run --country "Germany" --city "Deggendorf"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            dist/PrayerPlayer.app/Contents/MacOS/PrayerPlayer --dry-run --country "Germany" --city "Deggendorf"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            ./dist/PrayerPlayer/PrayerPlayer.exe --dry-run --country "Germany" --city "Deggendorf"
          fi
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prayer-player-${{ matrix.os_name }}
          path: ${{ matrix.asset_glob }}

  ##################################################
  #                  RELEASE JOB                   #
  ##################################################
  release:
    name: 🚀 Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release and upload assets
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # Artifacts will be downloaded into subdirectories (e.g., dist/prayer-player-ubuntu/)

      - name: Display structure of downloaded files
        # This step helps in debugging by showing the exact file structure before release.
        run: ls -R dist

      - name: Create GitHub Release and Upload Assets
        # This single action creates the release and uploads all matching files.
        # It handles the logic of finding the files within the directories
        # created by download-artifact, which fixes the 'EISDIR' error.
        uses: softprops/action-gh-release@v2
        with:
>>>>>>> 7db3ce6667efae9c4dff90b3b6f9b914dd513ac2
          files: |
            dist/prayer-player-ubuntu/*.deb
            dist/prayer-player-macos/*.dmg
            dist/prayer-player-windows/*.exe
          fail_on_unmatched_files: true
